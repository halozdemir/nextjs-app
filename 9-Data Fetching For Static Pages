//NextJS has this built-in page pre-rendering but this built-in process has a flaw. The page that is pre-rendered, has basically the snapshot after the first component render cycle, and that might be missing crucial data.

//So If we visit some route "/some-route", If some request send to "/some-route", there we return that pre-rendered page, but we might be missing data here. 

//So "pre-rendering is theoritcally good for SEO, for search engine optimazation, It might not always be. But after this HTML page was received, React will take over, The page is hydrated as this process is called, which means that, Now React will turn this into a single page application
, and take over control, and then this useEffect function might be executed, data might be fetched, and the page might be updated, in the browser, not on the server, no on the pre-rendered page. But instead, "after this page was received in the browser".



//And therefore, we then have a fully interactive page with all the data we need.

import { useEffect, useState } from "react";

const DUMMY_MEETUPS = [
  {
    id: "m1",
    title: "A first Meetup",
    image:
      "https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
    address: "Some address 10, 1234 Cork City",
    description: "This is a first address",
  },
  {
    id: "m2",
    title: "Second Meetup",
    image:
      "https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
    address: "Some address 12, 1234 Cork City",
    description: "This is second address",
  },
];

function HomePage() {
  const [loadedMeetups, setLoadedMeetups] = useState([]);

  useEffect(() => {
    //send http request and fetch data
    setLoadedMeetups(DUMMY_MEETUPS);
  }, []);

  return <MeetupList meetups={loadedMeetups} />;
}


//But If we wanna pre-render a page with data, so this initially returned HTML code already contains the data, we "need to fine tune this built-in pre-rendering process", and "we need to configure it".

//And for this, NextJS gives us 2 forms of pre-rendering which we can use for controlling how the pages should be rendered.

//It has something "static generation" and it has an alternative which is called "server-side rendering".


//Were gonna start with "static generation". This is the approach you should typically use. How does it work?

//When using "static generation", "a page component is pre-rendered when you build your application, when you build the next project, so when you build it for production" (build for production by running "npm run build" script)

//And thats important, with static generation, by default, your page is not pre-rendered on the fly, on the server, when a reqest reaches the server, but instead it is pre-rendered, when you as a developer, build your site for production.

//And that means that, after it was deployed, that pre-rendered page does not change. At least, not by default. If you then updated the data, and you know that the pre-rendered page needs to change, you need to start that build process again, and redeploy again.


//Lets start with static generation. As I mentioned, by default NextJS prepares your pages, It by default generates your pages already statically, and it by default does that during the build process.

//But If you need to wait for data, If you need to add data fetching to a page component, you can do that by "exporting a special function from inside your page component file". And thats important, "this only works in your page component files, not standard components file, only in  component files inside of the pages folder". In a page component file, you can "export a function called getStaticProps()". And "it has to be called". This is a reserved name (getStaticProps), nextJS will look for a function with that name, and if it finds it, it executes this function during this pre-rendering process. So "nextJS will then not directly call your component function (HomePage) and use the returned JSX snapshot as HTML content, but It will first of all, call getStaticProps() function before nextJS calls the page component function (HomePage)"

//And getStaticProps has this name, because indeed, its job is to prepare props for this page (HomePage- for pre-rendering with actual data). And these props could then contain the data this HomePage needs. And that's useful, because getStaticProps is allowed to be asynchronous function. You can return a promise there.

//And then, thats the key thing, "nextJS will wait for this promise to resolve , which means nextJS waits until your data is loaded, and then you return the props for this component function (homePage). And with that, you're able to load data, before this component function is executed, so that this component can be rendered with the required data."


//Here "in getStaticProps", you can also execute any code, that would normally only run on a server, "you could  access a file system inside getStaticProps or securely connect to a database". Because any code that you write in the "getStaticProps will never end up on the client side, and it will never execute on the client side" simply "because this code getStaticProps is executed during the build process, not on the server, and especially not on the clients of your visitors". So the code in getStaticProps function, will never reach the machines of your visitors. It will never execute on their machines.

//Now "in getStaticProps function you can do whatever you want, for example, fetch data from API, or from a database, or read data from  some files in the file system". But then once youre done with whatever you did to get the data you need, you "need to return an object inside getStaticProps function", "you always need to return an object"

//In this object, you can configure various things, but most importantly, "you typically set a props property here, and it has to be named props". And that props property holds "another object which will be the props object you received in your component function, in this page component function (HomePage), this page component now receives a props object, and the object will be the object you set as props here  in the return object of getStaticProps function"

//So "in there we could have meetups key, which holds DUMMY_MEETUPS." With that, those DUMMY_MEETUPS would be loaded and prepared in getStaticProps, and then they would be set as props for this page component (HomePage)

//Therefore in this page component (HomePage), we no longer need to manage state, (useState-loadedMeetups), we no longer need useEffect, and we can therefore get rid of those imports, because "we now get the data through props". And "our meeetups prop for the instance of the MeetupList component are gonna be replaced with meetups = props.meetups (old=> meetups=loadedMeetups/state)". (props.meetups because I added meetups key inside the props object in the return object of getStaticProps function)

old=>
import { useEffect, useState } from "react";

const DUMMY_MEETUPS = [
  {
    id: "m1",
    title: "A first Meetup",
    image:
      "https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
    address: "Some address 10, 1234 Cork City",
    description: "This is a first address",
  },
  {
    id: "m2",
    title: "Second Meetup",
    image:
      "https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1771&q=80",
    address: "Some address 12, 1234 Cork City",
    description: "This is second address",
  },
];

function HomePage(props) {
  const [loadedMeetups, setLoadedMeetups] = useState([]);

  useEffect(() => {
    //send http request and fetch data
    setLoadedMeetups(DUMMY_MEETUPS);
  }, []);

  return <MeetupList meetups={props.meetups} />;
}

export async function getStaticProps() {
  //fetch data from an API
  return {
    props: {
      meetups: DUMMY_MEETUPS,
    },
  };
}

new=>

function HomePage(props) {
  return <MeetupList meetups={props.meetups} />;
}

export async function getStaticProps() {
  //fetch data from an API
  return {
    props: {
      meetups: DUMMY_MEETUPS,
    },
  };
}



//And thats how we can move the data fetching away from the client to the server-side, or to be precise, to the during the build-process side.

//If I now save everything, If we reload our page, we still see our meetups, but now If I view the page source, we see that we no longer have an empty unordered list, instead we have an unordered list which has list items, with the images, and the title and so on

//So this is now pre-rendered and it now contains the full HTML code, and thats of course also great for search engines then. Because now data is not fetched in a second cmponent render cycle on the client, but initially, before this page is pre-rendered during the build-process.

//And thats a great plus and one of the great features of NextJS, this data fetching for pre-rendering. And getStaticProps function will be a function you use a lot when working with nextJS.


<ul class="MeetupList_list__1iafn"><li class="MeetupItem_item__3siMU"><div class="Card_card__3KSLO"><div class="MeetupItem_image__13rAP"><img src="https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1771&amp;q=80" alt="A first Meetup"/></div><div class="MeetupItem_content__3uEkT"><h3>A first Meetup</h3><address>Some address 10, 1234 Cork City</address></div><div class="MeetupItem_actions__LvT9B"><button>Show Details</button></div></div></li><li class="MeetupItem_item__3siMU"><div class="Card_card__3KSLO"><div class="MeetupItem_image__13rAP"><img src="https://images.unsplash.com/photo-1588963940468-9e6e4d202209?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1771&amp;q=80" alt="Second Meetup"/></div><div class="MeetupItem_content__3uEkT"><h3>Second Meetup</h3><address>Some address 12, 1234 Cork City</address></div><div class="MeetupItem_actions__LvT9B"><button>Show Details</button></div></div></li></ul>